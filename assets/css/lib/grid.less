/* ==========================================================================
// GRID
// =========================================================================*/


//This is a temporary grid

//============ Column Calculations =============//

.column-width-in-context(@columns:1, @context:@GRID-MaxWidth) {
	width: (((@GRID-ColWidth * @columns) + (@GRID-GutterWidth * @columns))/@context)*100+0%;
}
 
.column-width(@columns:1) {
	.column-width-in-context(@columns, @GRID-MaxWidth);
}

.generate-grid(@cols:@GRID-Cols, @colwidth:@GRID-ColWidth, @gutter:@GRID-GutterWidth) {

	.spanNestedX(@parent, @index) when (@index > 0) {
		(~".span-@{parent} > .span-@{index}") { 
			.nested(@parent, @index)
		}
		.spanNestedX(@parent, @index - 1);
	}

	.spanNestedX(@parent, -1) {}

	.spanX(@index) when (@index > 0) {
		(~".span-@{index}") { 
			.span(@index);
		}
		.spanNestedX(@index, @index - 1);
		.spanX(@index - 1);
	}

	.spanX(0) {}

	.offsetX(@index) when (@index > 0) {
		(~".offset-@{index}") { 
			.offset(@index); 
		}
		.offsetX(@index - 1);		
	}

	.offsetX(0) {}

	.nested(@parent, @index) {
		.column-width-in-context(@index, @parent);
	}

	.span(@index) {
		.column-width(@index);
	}

	.offset(@index) {
		.column-offset(@index);
	}

	.spanX(@cols, @cols -1);
	.spanNestedX(@cols);
	.offsetX(@cols);

}

.grid > [class*="span-"]:first-child, .boxes > [class*="span"]:first-child {
	margin-left: 0;
	clear:left;
}

.grid > [class*="span-"]:last-child {
	margin-bottom:0;
}

[class^="span-"] {
	width:100%;
	margin-left:0;
} 

.grid {
	width:auto;
	margin:0 0.5em;
	.clearfix();
}

//============ Responsive Adjustments =============//

//Mobile Grid
@media only screen and (min-width: 767px) {

[class*="span-"] {
	display:inline;
	float:left; 
}
	.grid {
	max-width:@GRID-MaxWidth *1px;
	margin:0 auto;
	}

}