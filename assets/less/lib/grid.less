/* ==========================================================================
// GRID
// =========================================================================*/


//This is a temporary grid

//============ Column Calculations =============//

.generate-grid(@maxcols:@GRID-Cols, @colwidth:@GRID-ColWidth, @gutter:@GRID-GutterWidth) {

	.column-width-in-context(@columns:1, @context:@GRID-MaxWidth) {
		width: ((((@GRID-ColWidth * @columns) + (@GRID-GutterWidth * (@columns - 1)))/@context)*100)+0%;
	}

	.column-offset-in-context(@columns:@DEFAULTS-Cols, @context:@GRID-MaxWidth) {
		margin-left: ((((@GRID-ColWidth * @columns) + (@GRID-GutterWidth * (@columns - 1)))/@context)*100)+0%;
	}
	 
	.column-width(@columns:1) {
		.column-width-in-context(@columns, @GRID-MaxWidth);
	}

	.column-offset(@columns:1) {
		.column-offset-in-context(@columns, @GRID-MaxWidth);
	}

	.nest(@parent:@maxcols, @index) {
		@contextmaxwidth: (@colwidth * @parent) + (@gutter * (@parent - 1));
		.column-width-in-context(@index, @contextmaxwidth);
	}

	.span(@index) {
		.column-width(@index);
	}

	.offset(@index) {
		.column-offset(@index);
	}

	// Start of Loops

	.spanX(@index) when (@index > 0) {
		(~".span-@{index}") { 
			.span(@index);
		}
		.spanX(@index - 1);
	}

	.spanX(0) {}

	.spanNestX(@parent, @index) when (@index > 0) {
		(~".span-@{parent} > .span-@{index}") { 
			.nest(@parent, @index);
		}
		.spanNestX(@parent, @index - 1);
	}

	.spanNestX(@parent, @index) when (@parent > 0) and (@index = 0){
		.spanNestX(@parent - 1, @parent - 2);
	}

	.spanNestX(0, 0) {}

	.offsetX(@index) when (@index > 0) {
		(~".offset-@{index}") {
			.offset(@index); 
		}
		.offsetX(@index - 1);
	}

	.offsetX(0) {}

	// end of loops

	.spanX(@maxcols);
	.offsetX(@maxcols - 1);
	//.spanNestedX(@maxcols, @maxcols - 1);

}

.grid > [class*="span-"]:first-child {
	margin-left: 0;
	clear:left;
}

[class^="span-"] {
	width:100%;
	margin-left:0;
} 

.grid {
	width:auto;
	margin:0 0.5em;
	.clearfix();
}


//============ Responsive Adjustments =============//

//Desktop Grid
@media only screen and (min-width: 767px) {

	[class*="span-"] {
		display:inline;
		float:left; 
	}

	.grid {
		max-width: @GRID-MaxWidth * 1px;
		margin:0 auto;
	}

	.generate-grid(@GRID-Cols, @GRID-ColWidth, @GRID-GutterWidth);
}